В этом задании реализуем приложение "лента событий".

1. Реализуем класс Event.
Конструктор класса должен принимать следующие поля: title, description, location, start_time, end_time, organizer_email, link.
Поля title, description, location, start_time и organizer_email должны проверяться на пустоту. Если поле равно nil или пустой строке - бросаем исключение.
Также необходимо дать возможность читать все поля с помощью attr_reader.

2. Реализуем класс Feed.
Этот класс позволяет добавлять мероприятия в ленту с помощью метода add. В случае добавления пустого аргумента(nil) бросаем исключение.

3. В файле demo.rb создаем 5 мероприятий и добавляем их в Feed.

4. Feed позволяет показать ближайшие N мероприятий.
Для этого реализуем метод upcoming(n), куда передается количество мероприятий.
Он возвращает ближайшие мероприятия, отсортированные по дате начала.
Также feed позволяет увидеть все мероприятия через метод all.

5. Добавляем в Event поле tags. Типом этого поля должен быть Array.
При создании Event мы можем передать в него массив строковых тегов, описывающих данное мероприятие.
Например Event.new(title: ..., description: ..., tags: ["programming", "ruby", "rails"]).

6. В Feed добавляем метод find, который принимает хеш в качестве аргумента.
Одним из возможных ключей данного хеша является tags.
Таким образом метод позволяет найти в ленте все мероприятия, у которых есть хотя бы один из заданных тегов
feed.find(tags: ["ruby"])

7. В Event реализуем приватный метод, который будет вызываться при создании мероприятия.
Задача этого метода найти в названии и описании мероприятия ключевые слова, которые могут быть использованы как теги.
Список возможных ключевых слов можем задать пока что константой прямо в классе Event.
POSSIBLE_TAGS = ["ruby", "rails", "docker", "devops"].
Таким образом, если мы создаем мероприятие не указав теги явно, но при этом описание мероприятия содержит данные ключевые слова - теги должны назначиться данному мероприятию автоматически.

6. В Feed реализуем метод, который вернет все мероприятия у которых email организатора равен заданному.
feed.by_organizer("some@email.com")

8. В Event добавляем поле status. При создании объекта это поле должно иметь значение "pending". Мероприятия с данным статусом не должны возвращаться никаким методом класса Feed кроме pending_events.
Также в Event добавляем методы approve/reject. Они должны менять статус мероприятия на соответствующий.
Все методы Feed должны возвращать только мероприятия со статусом approved.